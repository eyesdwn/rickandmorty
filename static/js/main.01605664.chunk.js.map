{"version":3,"sources":["components/Count.jsx","components/Buttons.jsx","store/ImageStore.jsx","components/Card.jsx","components/Form.jsx","components/Comments.jsx","components/Post.jsx","store/Store.jsx","index.js"],"names":["Count","store","useContext","StoreContext","useObserver","className","align","likesCount","commentsCount","Buttons","type","onClick","updateCount","document","getElementById","focus","imageStore","id","characterId","this","response","fetch","data","json","runInAction","imageUrl","image","observable","action","Card","src","alt","fetchImage","Form","React","Component","handleSubmit","e","preventDefault","postComment","comment","value","render","Consumer","onSubmit","placeholder","ref","node","Comments","comments","map","index","key","Dashboard","storeInstance","push","length","computed","createContext","ReactDOM","Provider"],"mappings":"0OAIe,SAASA,IACpB,MAAMC,EAAQC,qBAAWC,GACzB,OAAOC,YAAY,IACf,yBAAKC,UAAU,uBACX,yBAAKA,UAAU,SAASC,MAAM,QAC1B,uBAAGD,UAAU,oBAAqBJ,EAAMM,YAE5C,yBAAKF,UAAU,SAASC,MAAM,SACzBL,EAAMO,cADX,eCRG,SAASC,IACpB,MAAMR,EAAQC,qBAAWC,GACzB,OACI,yBAAKE,UAAU,OACX,yBAAKA,UAAU,UACb,4BAAQK,KAAK,SAASL,UAAU,iCAAiCM,QAAS,IAAMV,EAAMW,eACrF,uBAAGP,UAAU,sBADd,SAKF,yBAAKA,UAAU,UACb,4BAAQK,KAAK,SAASL,UAAU,uBAAuBM,QAAS,IAAME,SAASC,eAAe,WAAWC,SACvG,uBAAGV,UAAU,oBADf,a,ybCSCW,I,MAAAA,EAFI,I,OAnBnB,MAAkB,c,YAAD,KAEbC,GAAK,E,EAFQ,K,EAAA,W,EAAA,M,EAAA,I,sJAMb,mBACQ,MAAMC,IAAgBC,KAAKF,GACrBG,QAAiBC,MAAO,6CAA4CH,GACpEI,QAAaF,EAASG,OAG5BC,YAAY,KACRL,KAAKM,SAAWH,EAAKI,W,sBAThCC,K,wEAAuB,6D,4BAEvBC,K,0ECFU,SAASC,IACpB,OACIzB,YAAY,IACR,yBAAKC,UAAU,QACX,yBAAKyB,IAAKd,EAAWS,SAAUpB,UAAU,eAAe0B,IAAI,QAC5D,4BAAQ1B,UAAU,gBAAgBM,QAAS,KAAQK,EAAWgB,eAC1D,uBAAG3B,UAAU,yBAEjB,kBAACL,EAAD,MACA,yBAAKK,UAAU,aACX,kBAACI,EAAD,SCbL,MAAMwB,UAAaC,IAAMC,UAAW,eAAD,oBAE9CC,aAAe,CAACC,EAAGpC,KACfoC,EAAEC,iBACFrC,EAAMsC,YAAYpB,KAAKqB,QAAQC,OAC/BtB,KAAKqB,QAAQC,MAAQ,IAGzBC,SACI,OACI,kBAACvC,EAAawC,SAAd,KAEQ1C,GAEI,0BAAM2C,SAAWP,GAAMlB,KAAKiB,aAAaC,EAAGpC,IACxC,6BACI,2BAAOS,KAAK,OAAOO,GAAI,UAAWZ,UAAU,eAAewC,YAAa,sBAAuBC,IAAKC,IAChG5B,KAAKqB,QAAUO,SChBpC,SAASC,IACpB,MAAM/C,EAAQC,qBAAWC,GACzB,OAAOC,YAAY,IACf,2BAAOC,UAAU,SACb,+BAEQJ,EAAMgD,SAASC,IAAI,CAACV,EAASW,IAErB,wBAAIC,IAAKD,GACL,4BACKX,QCTtB,SAASa,IACtB,OACE,yBAAKhD,UAAU,eAAeC,MAAM,UAClC,kBAACuB,EAAD,MACA,kBAAC,EAAD,MACA,kBAACmB,EAAD,O,ulBCaSM,MAFO,I,OAnBtB,MAAa,cAAD,sDAKA1C,cACJO,KAAKZ,aAGDgC,YAAYC,GAChBrB,KAAK8B,SAASM,KAAKf,GAGvB,oBACI,OAAOrB,KAAK8B,SAASO,U,wBAbxB7B,K,yEAAwB,M,4BAExBA,K,wEAAsB,CAAC,MAAO,c,6BAE9BC,K,qGAIAA,K,uGAIA6B,K,6ECTE,MAAMtD,EAAe+B,IAAMwB,gBAElCC,IAASjB,OACD,kBAACvC,EAAayD,SAAd,CAAuBnB,MAAOa,GAC1B,kBAAC,EAAD,OAENzC,SAASC,eAAe,S","file":"static/js/main.01605664.chunk.js","sourcesContent":["import React, { useContext } from 'react';\nimport { useObserver } from 'mobx-react';\nimport { StoreContext } from '../index'\n\nexport default function Count() {\n    const store = useContext(StoreContext)\n    return useObserver(() => (\n        <div className=\"row reactions-count\" >\n            <div className=\"col-sm\" align=\"left\">\n                <i className=\"fa fa-thumbs-up\" />{store.likesCount}\n            </div>\n            <div className=\"col-sm\" align=\"right\">\n                {store.commentsCount} comments\n        </div>\n        </div>\n    ))\n}","import React, { useContext } from \"react\";\nimport { StoreContext } from '../index'\n\nexport default function Buttons() {\n    const store = useContext(StoreContext)\n    return (\n        <div className=\"row\">\n            <div className=\"col-sm\">\n              <button type=\"button\" className=\"btn btn-light align-top button\" onClick={() => store.updateCount()}>\n               <i className=\"fa fa-thumbs-o-up\" />\n               Like\n              </button>\n            </div>\n            <div className=\"col-sm\">\n              <button type=\"button\" className=\"btn btn-light button\" onClick={() => document.getElementById('comment').focus()}>\n                <i className=\"fa fa-comment-o\" />\n                Comment\n              </button>\n            </div>\n        </div>\n    );\n}","import { action, runInAction, observable } from \"mobx\";\n\nclass ImageStore {\n\n    id = 1\n\n    @observable imageUrl = `https://rickandmortyapi.com/api/character/avatar/1.jpeg`\n\n    @action async fetchImage() {\n            const characterId = ++this.id\n            const response = await fetch(`https://rickandmortyapi.com/api/character/${characterId}`)\n            const data = await response.json()\n            // this.setImageUrl(data.image)\n\n            runInAction(() => {\n                this.imageUrl = data.image\n            })\n    }\n\n}\n\nconst imageStore = new ImageStore()\n\nexport default imageStore;","import React from \"react\";\nimport Count from \"./Count\";\nimport Buttons from \"./Buttons\";\nimport imageStore from '../store/ImageStore'\nimport { useObserver } from \"mobx-react\";\n\nexport default function Card() {\n    return (\n        useObserver(() => (\n            <div className=\"card\">\n                <img src={imageStore.imageUrl} className=\"card-img-top\" alt=\"...\" />\n                <button className=\"btn btn-light\" onClick={() => { imageStore.fetchImage() }}>\n                    <i className=\"fa fa-chevron-right\" />\n                </button>\n                <Count />\n                <div className=\"card-body\" >\n                    <Buttons />\n                </div>\n            </div>\n        ))\n    );\n}","import React from 'react';\nimport { StoreContext } from '../index';\n\nexport default class Form extends React.Component {\n\n    handleSubmit = (e, store) => {\n        e.preventDefault();\n        store.postComment(this.comment.value);\n        this.comment.value = \"\";\n    }\n\n    render() {\n        return (\n            <StoreContext.Consumer>\n                {\n                    store => (\n\n                        <form onSubmit={(e) => this.handleSubmit(e, store)}>\n                            <div>\n                                <input type=\"text\" id={'comment'} className=\"form-control\" placeholder={\"Write a comment ...\"} ref={node => {\n                                    this.comment = node;\n                                }} />\n                            </div>\n                        </form>\n                    )\n                }\n            </StoreContext.Consumer>\n        )\n    }\n}","import React, { useContext } from 'react';\nimport { StoreContext } from '../index';\nimport { useObserver } from 'mobx-react';\n\nexport default function Comments() {\n    const store = useContext(StoreContext)\n    return useObserver(() => (\n        <table className=\"table\">\n            <tbody>\n                {\n                    store.comments.map((comment, index) => {\n                        return (\n                            <tr key={index}>\n                                <td>\n                                    {comment}\n                                </td>\n                            </tr>\n                        )\n\n                    })\n                }\n            </tbody>\n        </table>\n    )\n  )\n}","import React from \"react\";\nimport Card from \"./Card\";\nimport Form from './Form';\nimport Comments from \"./Comments\";\n\nexport default function Dashboard() {\n  return (\n    <div className=\"container-md\" align=\"center\">\n      <Card />\n      <Form />\n      <Comments />\n    </div>\n  )\n}","import { observable, action, computed } from 'mobx'\n\nclass Store {\n    @observable likesCount = 12\n\n    @observable comments = [\"wow\", \"awesome\"]\n\n    @action updateCount() {\n        this.likesCount++;\n    }\n\n    @action postComment(comment) {\n        this.comments.push(comment)\n    }\n\n    @computed get commentsCount(){\n        return this.comments.length;\n    }\n\n}\n\nconst storeInstance = new Store()\n\nexport default storeInstance;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport './css/main.css'\nimport Post from \"./components/Post\";\nimport storeInstance from './store/Store'\n\nexport const StoreContext = React.createContext();\n\nReactDOM.render(\n        <StoreContext.Provider value={storeInstance}>\n            <Post />\n        </StoreContext.Provider >\n    , document.getElementById('app'));\n\nif (module.hot) {\n    module.hot.accept();\n}"],"sourceRoot":""}